<!--
  ~ Copyright Â© 2009-2016 The Apromore Initiative.
  ~
  ~ This file is part of "Apromore".
  ~
  ~ "Apromore" is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ "Apromore" is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ~ GNU Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this program.
  ~ If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
  -->

<window id="win" xmlns:n="http://www.zkoss.org/2005/zk/native"
        xmlns:z="http://www.zkoss.org/2005/zul"
        use="org.apromore.portal.dialogController.ModelToLogComparisonController">

    <n:style media="screen" type="text/css">
        @import url("/${arg.editor}/libs/ext-2.0.2/resources/css/ext-all.css");
        @import url("/${arg.editor}/libs/ext-2.0.2/resources/css/file-upload.css");
        @import url("/${arg.editor}/libs/ext-2.0.2/resources/css/xtheme-gray.css");
    </n:style>
    <n:link rel="Stylesheet" media="screen" href="/${arg.editor}/editor/css/theme_norm.css" type="text/css"/>
    <n:link rel="Stylesheet" media="screen" href="/${arg.editor}/editor/css/theme_norm_signavio.css" type="text/css"/>
    <n:link rel="Stylesheet" media="screen" href="/${arg.editor}/explorer/src/css/xtheme-smoky.css" type="text/css"/>
    <n:link rel="Stylesheet" media="screen" href="/${arg.editor}/explorer/src/css/custom-style.css" type="text/css"/>

    <n:div id="oryxwrapper" style="display: none">
        <n:script>
            <![CDATA[
                if (!ORYX) {
                    var ORYX = {};
                }
                if (!ORYX.CONFIG) {
                    ORYX.CONFIG = {};
                }
                ORYX.CONFIG.SERVER_HANDLER_ROOT_PREFIX = '../../' + '${arg.editor}';
            ]]>
        </n:script>

        <!-- JavaScript Dependencies of Signavio Process Editor-->
        <n:script src="/${arg.editor}/libs/prototype-1.5.1.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/path_parser.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/ext-2.0.2/adapter/ext/ext-base.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/ext-2.0.2/ext-all.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/ext-2.0.2/color-field.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/iscroll.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/editor/i18n/translation_en_us.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/editor/i18n/translation_signavio_en_us.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/utils.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/editor/apromore-editor.js" type="text/javascript"/>

        <!-- Include all Editor plug-ins -->
        <z:zk forEach="${arg.plugins}">
            <n:script src="${each.getJavaScriptURI()}" type="text/javascript"/>
        </z:zk>

        <n:span id="oryxstartupcode">
            <n:script>
                <![CDATA[
                    var urlData = '${arg.url}';

                    ORYX.Editor.prototype.resetDifference = function() {
                        reloadJSON(editorConfig);
                    }

                    ORYX.CONFIG.PANEL_LEFT_COLLAPSED = true;
                    ORYX.CONFIG.WINDOW_HEIGHT        = 600;

                    // Replace any current model in oryxEditor1 with 
                    var reloadJSON = function(json) {
                        // Remove the existing model from the canvas
                        oryxEditor1.getCanvas().getChildShapes().each(function (shape) {
                            oryxEditor1.deleteShape(shape);
                        }.bind(this));

                        // Reload the modified model
                        oryxEditor1.importJSON(json, true);
                    };

                    ORYX.Editor.prototype.displayMLDifference = function(type, start, a, b, newTasks, end, greys) {

                        // Find the shapes corresponding to the function arguments resource IDs
                        var indexJSON = function(json) {
                            var shapes = {};
                            json.childShapes.each(function (shape) {
                                shapes[shape.resourceId] = shape;
                            }.bind(this));
                            return shapes;
                        };

                        var json = jQuery.extend(true, {}, editorConfig);
                        var shapes = indexJSON(json);

                        var addFlowNode = function(id, stencilId, x, y, w, h) {
                            var addition = {
                                "bounds": {
                                    "lowerRight": { "x": x + w/2, "y": y + h/2 },
                                    "upperLeft": { "x": x - w/2, "y": y - h/2 }
                                },
                                "childShapes": [],
                                "incoming": [],
                                "labels": [],
                                "outgoing": [],
                                "properties": {
                                    "bordercolor": "#FF0000"
                                },
                                "resourceId": id,
                                "stencil": { "id": stencilId }
                            };
                            json.childShapes.push(addition);
                            shapes[id] = addition;
                            return addition;
                        };

                        var addSequenceFlow = function(id, source, target, waypoints) {
                            var findCenter = function(shape) {
                                return { x: (shape.bounds.lowerRight.x - shape.bounds.upperLeft.x)/2, y: (shape.bounds.lowerRight.y - shape.bounds.upperLeft.y)/2 }; 
                            };

                            var addition = {
                                "childShapes": [],
                                "dockers": [
                                    findCenter(shapes[source]),
                                    findCenter(shapes[target])
                                ],
                                "incoming": [],
                                "labels": [],
                                "outgoing": [
                                    { "resourceId": target }
                                ],
                                "properties": {
                                    "bordercolor": "#FF0000"
                                },
                                "resourceId": id,
                                "stencil": { "id": "SequenceFlow" },
                                "source": { "resourceId": source },
                                "target": { "resourceId": target }
                            };
                            if (waypoints) {
                                var endpoint = addition.dockers.pop();
                                addition.dockers = addition.dockers.concat(waypoints);
                                addition.dockers.push(endpoint);
                            }
                            json.childShapes.push(addition);
                            shapes[source].outgoing.push({ resourceId: id });
                        };

                        var highlight = function(shape) {
                            shape.properties["selected"] = true;
                            shape.properties["selectioncolor"] = "#FF0000";
                        };

                        var shapeCenter = function(shape) {
                            return {x: (shape.bounds.lowerRight.x + shape.bounds.upperLeft.x) / 2,
                                    y: (shape.bounds.lowerRight.y + shape.bounds.upperLeft.y) / 2};
                        }

                        // Create a gateway from the Start element, splitting between elements A and B and rejoining to the End element
                        var createSplitAndJoin = function(gatewayStencilId) {
                            if (message = validate(["start.length == 1", "a.length == 1", "b.length == 1", "end.length == 1"])) { alert(message); }
                            var ca = shapeCenter(shapes[a[0]]);
                            var cb = shapeCenter(shapes[b[0]]);

                            var dx = (cb.y - ca.y)
                            var dy = (ca.x - cb.x)
                            var scale = Math.max(90 / Math.sqrt(dx * dx + dy * dy), 0.5);
                            var startplus = addFlowNode("sid-startplus", gatewayStencilId, (ca.x + cb.x)/2 + (cb.y - ca.y)*scale, (ca.y + cb.y)/2 + (ca.x - cb.x)*scale, 40, 40).resourceId;
                            var endplus = addFlowNode("sid-endplus", gatewayStencilId, (ca.x + cb.x)/2 + (ca.y - cb.y)*scale, (ca.y + cb.y)/2 + (cb.x - ca.x)*scale, 40, 40).resourceId;

                            addSequenceFlow("sid-start-startplus", start[0], startplus);
                            addSequenceFlow("sid-startplus-a", startplus, a[0]);
                            addSequenceFlow("sid-startplus-b", startplus, b[0]);
                            highlight(shapes[a[0]]);
                            highlight(shapes[b[0]]);
                            addSequenceFlow("sid-a-endplus", a[0], endplus);
                            addSequenceFlow("sid-b-endplus", b[0], endplus);
                            addSequenceFlow("sid-endplus-end", endplus, end[0]);
                        }

                        var validate = function(constraints) {
                            var violations = constraints
                                .map(function(constraint, index, constraints) { return eval(constraint) ? null : constraint; })
                                .filter(function(x) { return x });
                            console.info("Violations: " + violations);
                            console.dir(violations);
                            return violations.length == 0 ? null : "Assertions violated by Compare-Logic for pattern " + type + ": " + violations;
                        }

                        switch (type) {
                        case "CAUSCONC1":  // In the log Task A occurs before Task B, while in the model they are concurrent
                        case "CONFLICT3":
                            if (message = validate(["start.length == 1", "a.length == 1", "b.length == 1", "end.length == 1"])) { alert(message); }
                            addSequenceFlow("sid-start-a", start[0], a[0]);
                            highlight(shapes[a]);
                            addSequenceFlow("sid-a-b", a[0], b[0]);
                            highlight(shapes[b]);
                            addSequenceFlow("sid-b-end", b[0], end[0]);
                            break;

                        case "CAUSCONC2":
                        case "CONFLICT1":
                            createSplitAndJoin("ParallelGateway");
                            break;

                        case "CONFLICT2":
                        case "CONFLICT4":
                            createSplitAndJoin("Exclusive_Databased_Gateway");
                            break;

                        case "TASKABS":
                        case "TASKABS3":
                        case "TASKABSModel":
                        case "UNOBSACYCLICINTER":
                            if (message = validate(["start.length == 1", "end.length == 1"])) { alert(message); }
                            addSequenceFlow("sid-start-end", start[0], end[0]);
                            break;

                        case "TASKABS4":
                        case "TASKABSLog":
                        case "TASKSUB":
                            if (message = validate(["start.length == 1", "newTasks.length == 1", "end.length == 1"])) { alert(message); }
                            var cs = shapeCenter(shapes[start[0]]);
                            var ce = shapeCenter(shapes[end[0]]);

                            var dx = (ce.y - cs.y)
                            var dy = (cs.x - ce.x)
                            var scale = Math.max(130 / Math.sqrt(dx * dx + dy * dy), 0.5);
                            var middle = addFlowNode("sid-a", "Task", (cs.x + ce.x)/2 + (ce.y - cs.y)*scale, (cs.y + ce.y)/2 + (cs.x - ce.x)*scale, 100, 80);
                            middle["properties"]["name"] = newTasks[0];
                            middle["properties"]["bgcolor"] = "white";

                            addSequenceFlow("sid-start-a", start[0], middle.resourceId);
                            addSequenceFlow("sid-a-end", middle.resourceId, end[0]);
                            break;

                        case "TASKSKIP1":
                            if (message = validate(["start.length == 1", "a.length == 1", "end.length == 1"])) { alert(message); }
                            var cs = shapeCenter(shapes[start[0]]);
                            var cm = shapeCenter(shapes[a[0]]);
                            var ce = shapeCenter(shapes[end[0]]);

                            var startplus = addFlowNode("sid-startplus", "Exclusive_Databased_Gateway", (cs.x + cm.x + cm.y - cs.y)/2, (cs.y + cm.y + cs.x - cm.x)/2, 40, 40).resourceId;
                            var endplus = addFlowNode("sid-endplus", "Exclusive_Databased_Gateway", (cm.x + ce.x + ce.y - cm.y)/2, (cm.y + ce.y + cm.x - ce.x)/2, 40, 40).resourceId;
                            addSequenceFlow("sid-startplus-endplus", startplus, endplus);

                            addSequenceFlow("sid-start-startplus", start[0], startplus);
                            addSequenceFlow("sid-startplus-a", startplus, a[0]);
                            highlight(shapes[a[0]]);
                            addSequenceFlow("sid-a-endplus", a[0], endplus);
                            addSequenceFlow("sid-endplus-end", endplus, end[0]);
                            break;

                        case "TASKSKIP2":
                        case "UNOBSCYCLICINTER":
                            if (message = validate(["start.length == 1", "a.length >= 1", "end.length == 1"])) { alert(message); }
                            addSequenceFlow("sid-start-a", start[0], a[0]);
                            highlight(shapes[a[0]]);
                            for (i=1; i < a.length; i++) {
                                addSequenceFlow("sid-link-" + 1, a[i-1], a[i]);
                                highlight(shapes[a[i]]);
                            }
                            addSequenceFlow("sid-a-end", a[a.length - 1], end[0]);
                            break;

                        case "UNMREPETITION":
                            if (message = validate(["start.length == 1", "end.length == 1"])) { alert(message); }
                            var repeating = start[0];
                            var following = end[0];
                            var cs = shapeCenter(shapes[repeating]);
                            var ce = shapeCenter(shapes[following]);
                            var cm = {x: (cs.x + ce.x + ce.y - cs.y)/2, y: (cs.y + ce.y + cs.x - ce.x)/2};

                            var middle = addFlowNode("sid-a", "Exclusive_Databased_Gateway", cm.x, cm.y, 40, 40);
                            highlight(shapes[repeating]);
                            addSequenceFlow("sid-start-xor", repeating, middle.resourceId, [{x: (cs.x + cm.x)/2 + (cs.y - cm.y)/5, y: (cs.y + cm.y)/2 - (cs.x - cm.x)/5}]);
                            addSequenceFlow("sid-xor-start", middle.resourceId, repeating, [{x: (cs.x + cm.x)/2 - (cs.y - cm.y)/5, y: (cs.y + cm.y)/2 + (cs.x - cm.x)/5}]);
                            addSequenceFlow("sid-xor-end", middle.resourceId, following);
                            break;

			default:
                            alert("Unsupported difference type \"" + type + "\"");
                            return;
                        }

                        reloadJSON(json);

                        // Reduce the opacity of greyed-out elements
                        shapes = indexJSON(this._canvas.toJSON());
                        for (var i = greys.length; i--;) {
                            shapes[greys[i]].getShape().node.setAttributeNS(null, "style", "opacity: 0.25");
                        }
                    }

                    var oryxEditor1;

                    // This function is called upon load of all Oryx dependencies
                    window.onOryxResourcesLoaded = function() {
                        var createEditor = function(id, jsonData) {
                            var editor = new ORYX.Editor ({
				model : {
				    id: id,
				    stencilset : {
                                        url : '${arg.url}',
                                        namespace : '${arg.url}'
                                    },
				},
				fullscreen : false
			    });

                            // Import new process model
                            new Ajax.Request('${arg.importPath}', {
                                parameters: {
                                    'data': jsonData,
                                    'differences': '${arg.differences}'
                                },
                                method: 'POST',

                                onSuccess: function(transport) {
                                    /*var*/ editorConfig = Ext.decode(transport.responseText);
                                    editor.importJSON(editorConfig, true);

                                    // Call Auto-Layout if everything is available
                                    window.setTimeout(function() {
                                        var layouter;
                                        if (urlData == 'http://b3mn.org/stencilset/epc#') {
                                            layouter = oryxEditor1.pluginsData.find(function(pluginData) {
                                                return pluginData.name === "Layout-EPC";
                                            });
                                        } else if (urlData == 'http://b3mn.org/stencilset/bpmn1.1#' || urlData == 'http://b3mn.org/stencilset/bpmn2.0#') {
                                            layouter = oryxEditor1.pluginsData.find(function(pluginData) {
                                                return pluginData.name === "Layout-BPMN";
                                            });
                                        }

                                        var doAutoLayout = false; //'${arg.doAutoLayout}' === 'true';
                                        if (layouter && doAutoLayout) {
                                            layouter.functionality();                                            
                                        }

                                        Ext.select('svg').setVisible(true);
                                        window.onbeforeunload = null;
                                    }, 1000);
                                }.bind(this),

                                onFailure: function(transport) {
                                    alert("Failed to load process fragment!");
                                }.bind(this)
                            });

                            return editor;
                        };

			oryxEditor1 = createEditor('oryx-canvas1', '${arg.jsonData}');

                        Ext.select('svg').setVisible(false);

                        ORYX.Plugins.ApromoreSave.apromoreSaveAs = function(json, svg) {
                            new Ajax.Request('${arg.exportPath}', {
                                parameters: {'data': json},
                                method: 'POST',

                                onSuccess: function(transport) {
                                    zAu.send(new zk.Event(zk.Widget.$(jq("$win")), 'onSaveAs', transport.responseText));
                                }.bind(this),

                                onFailure: function(transport) {
                                    Ext.Msg.show({
                                        title: "Error",
                                        msg: "Failed to save process as " + transport.responseText,
                                        buttons: Ext.Msg.OK,
                                        icon: Ext.Msg.ERROR
                                    }).getDialog().syncSize()
                                    alert("Failed to save process as " + nativeFormat);
                                }.bind(this)
                            });
                        };
                    };
                ]]>
            </n:script>
        </n:span>
    </n:div>

    <n:table>
        <n:tr>
            <n:td style="vertical-align: top" width="20%" height="600">
                <tree>
                    <treecols>
                        <treecol label="Differences"/>
                    </treecols>
                    <treechildren id="differences"></treechildren>
                </tree>
            </n:td>
            <n:td valign="top"><n:div id="oryx-canvas1"></n:div></n:td>
        </n:tr>
    </n:table>
</window>

