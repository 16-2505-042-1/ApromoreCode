<!--
  ~ Copyright Â© 2009-2015 The Apromore Initiative.
  ~
  ~ This file is part of "Apromore".
  ~
  ~ "Apromore" is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ "Apromore" is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ~ GNU Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this program.
  ~ If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
  -->

<window id="win" xmlns:n="http://www.zkoss.org/2005/zk/native" use="org.apromore.portal.dialogController.SignavioController">

    <n:style media="screen" type="text/css">
        @import url("/editor/libs/ext-2.0.2/resources/css/ext-all.css");
        @import url("/editor/libs/ext-2.0.2/resources/css/file-upload.css");
        @import url("/editor/libs/ext-2.0.2/resources/css/xtheme-gray.css");
    </n:style>
    <n:link rel="Stylesheet" media="screen" href="/editor/editor/css/theme_norm.css" type="text/css"/>
    <n:link rel="Stylesheet" media="screen" href="/editor/editor/css/theme_norm_signavio.css" type="text/css"/>
    <n:link rel="Stylesheet" media="screen" href="/editor/explorer/src/css/xtheme-smoky.css" type="text/css"/>
    <n:link rel="Stylesheet" media="screen" href="/editor/explorer/src/css/custom-style.css" type="text/css"/>

    <n:div id="oryxwrapper" style="display: none">
        <n:script>
            <![CDATA[
                if (!ORYX) {
                    var ORYX = {};
                }
                if (!ORYX.CONFIG) {
                    ORYX.CONFIG = {};
                }
                ORYX.CONFIG.SERVER_HANDLER_ROOT_PREFIX = "../../editor";
            ]]>
        </n:script>

        <!-- JavaScript Dependencies of Signavio Process Editor-->
        <n:script src="/editor/libs/prototype-1.5.1.js" type="text/javascript"/>
        <n:script src="/editor/libs/path_parser.js" type="text/javascript"/>
        <n:script src="/editor/libs/ext-2.0.2/adapter/ext/ext-base.js" type="text/javascript"/>
        <n:script src="/editor/libs/ext-2.0.2/ext-all.js" type="text/javascript"/>
        <n:script src="/editor/libs/ext-2.0.2/color-field.js" type="text/javascript"/>
        <n:script src="/editor/libs/iscroll.js" type="text/javascript"/>
        <n:script src="/editor/editor/i18n/translation_en_us.js" type="text/javascript"/>
        <n:script src="/editor/editor/i18n/translation_signavio_en_us.js" type="text/javascript"/>
        <n:script src="/editor/libs/utils.js" type="text/javascript"/>
        <n:script src="/editor/editor/oryx.debug.js" type="text/javascript"/>

        <n:span id="oryxstartupcode">
            <n:script>
                <![CDATA[
                    var urlData = '${arg.url}';

                    ORYX.Editor.prototype.highlightDifferences = function(run, colorsBPMN) {
                        console.log('Highlighting differences for ' + run + ' on ' + this.id);

                        // Set selection properties for highlighted elements
                        this._canvas.getChildShapes().each(function (shape) {
                            var color = colorsBPMN[shape.resourceId];
                            console.log("Element " + shape.resourceId + " color " + color);
                            if (color) {
                                shape.setProperty("selected", true);
                                shape.setProperty("selectioncolor", color);
                            } else {
                                shape.setProperty("selected", false);
                                shape.setProperty("selectioncolor", null);
                            }
                        }.bind(this));

                        this._canvas.update();

                        console.log('Highlighted differences for ' + run + ' on ' + this.id);
                        console.log(this);
                        console.log('Logged run');
                    }

                    var oryxEditor, oryxEditor2;

                    // This function is called upon load of all Oryx dependencies
                    window.onOryxResourcesLoaded = function() {
                        var createEditor = function(id, jsonData) {
                            var editor = new ORYX.Editor ({
				model : {
				    id: id,
				    stencilset : {
                                        url : '${arg.url}',
                                        namespace : '${arg.url}'
                                    },
				},
				fullscreen : false
			    });

                            // Import new process model
                            new Ajax.Request('${arg.importPath}', {
                                parameters: {
                                    'data': jsonData,
                                    'differences': '${arg.differences}'
                                },
                                method: 'POST',

                                onSuccess: function(transport) {
                                    var editorConfig = Ext.decode(transport.responseText);
                                    editor.importJSON(editorConfig, true);

                                    // Call Auto-Layout if everything is available
                                    window.setTimeout(function() {
                                        var layouter;
                                        if (urlData == 'http://b3mn.org/stencilset/epc#') {
                                            layouter = oryxEditor1.pluginsData.find(function(pluginData) {
                                                return pluginData.name === "Layout-EPC";
                                            });
                                        } else if (urlData == 'http://b3mn.org/stencilset/bpmn1.1#' || urlData == 'http://b3mn.org/stencilset/bpmn2.0#') {
                                            layouter = oryxEditor1.pluginsData.find(function(pluginData) {
                                                return pluginData.name === "Layout-BPMN";
                                            });
                                        }

                                        var doAutoLayout = '${arg.doAutoLayout}' === 'true';
                                        if (layouter && doAutoLayout) {
                                            layouter.functionality();                                            
                                        }

                                        Ext.select('svg').setVisible(true);
                                        window.onbeforeunload = null;
                                    }, 1000);
                                }.bind(this),

                                onFailure: function(transport) {
                                    alert("Failed to load process fragment!");
                                }.bind(this)
                            });

                            return editor;
                        };

			oryxEditor1 = createEditor('oryx-canvas1', '${arg.jsonData}');
			oryxEditor2 = createEditor('oryx-canvas2', '${arg.jsonData2}');

                        Ext.select('svg').setVisible(false);

                        ORYX.Plugins.ApromoreSave.apromoreSaveAs = function(json, svg) {
                            new Ajax.Request('${arg.exportPath}', {
                                parameters: {'data': json},
                                method: 'POST',

                                onSuccess: function(transport) {
                                    zAu.send(new zk.Event(zk.Widget.$(jq("$win")), 'onSaveAs', transport.responseText));
                                }.bind(this),

                                onFailure: function(transport) {
                                    Ext.Msg.show({
                                        title: "Error",
                                        msg: "Failed to save process as " + transport.responseText,
                                        buttons: Ext.Msg.OK,
                                        icon: Ext.Msg.ERROR
                                    }).getDialog().syncSize()
                                    alert("Failed to save process as " + nativeFormat);
                                }.bind(this)
                            });
                        };
                    };
                ]]>
            </n:script>
        </n:span>
    </n:div>

    <n:table style="width: 100%; height: 100%">
        <n:tr>
            <n:td rowspan="2" style="vertical-align: top" width="20%">
                <vbox>
                    <n:table>
                        <n:tr>
                            <n:th>Model 1 size (PES)</n:th>
                            <n:td><label id="m1-pes-size"/></n:td>
                        </n:tr>
                        <n:tr>
                            <n:th>Model 2 size (PES)</n:th>
                            <n:td><label id="m2-pes-size"/></n:td>
                        </n:tr>
                    </n:table>
                    <tree>
                        <treecols>
                            <treecol label="Difference"/>
                        </treecols>
                        <treechildren id="differences"></treechildren>
                    </tree>
                </vbox>
            </n:td>
            <n:td><n:div id="oryx-canvas1"></n:div></n:td>
        </n:tr>
        <n:tr>
            <n:td><n:div id="oryx-canvas2"></n:div></n:td>
        </n:tr>
    </n:table>>
</window>

