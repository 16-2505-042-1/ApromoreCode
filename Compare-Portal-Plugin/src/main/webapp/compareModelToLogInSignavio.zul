<!--
  ~ Copyright Â© 2009-2017 The Apromore Initiative.
  ~
  ~ This file is part of "Apromore".
  ~
  ~ "Apromore" is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ "Apromore" is distributed in the hope that it will be useful, but
  ~ WITHOUT ANY WARRANTY; without even the implied warranty
  ~ of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  ~ See the GNU Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this program.
  ~ If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
  -->

<window id="win" xmlns:n="http://www.zkoss.org/2005/zk/native"
        xmlns:z="http://www.zkoss.org/2005/zul"
        use="org.apromore.plugin.portal.compareBP.ModelToLogComparisonController">

    <n:style media="screen" type="text/css">
        @import url("/${arg.editor}/libs/ext-2.0.2/resources/css/ext-all.css");
        @import url("/${arg.editor}/libs/ext-2.0.2/resources/css/file-upload.css");
        @import url("/${arg.editor}/libs/ext-2.0.2/resources/css/xtheme-gray.css");
    </n:style>
    <n:link rel="Stylesheet" media="screen" href="/${arg.editor}/editor/css/theme_norm.css" type="text/css"/>
    <n:link rel="Stylesheet" media="screen" href="/${arg.editor}/editor/css/theme_norm_signavio.css" type="text/css"/>
    <n:link rel="Stylesheet" media="screen" href="/${arg.editor}/explorer/src/css/xtheme-smoky.css" type="text/css"/>
    <n:link rel="Stylesheet" media="screen" href="/${arg.editor}/explorer/src/css/custom-style.css" type="text/css"/>

    <n:div id="oryxwrapper" style="display: none">
        <n:script>
            <![CDATA[
                if (!ORYX) {
                    var ORYX = {};
                }
                if (!ORYX.CONFIG) {
                    ORYX.CONFIG = {};
                }
                ORYX.CONFIG.SERVER_HANDLER_ROOT_PREFIX = '../../' + '${arg.editor}';
            ]]>
        </n:script>

        <!-- JavaScript Dependencies of Signavio Process Editor-->
        <n:script src="/${arg.editor}/libs/prototype-1.5.1.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/path_parser.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/ext-2.0.2/adapter/ext/ext-base.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/ext-2.0.2/ext-all.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/ext-2.0.2/color-field.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/iscroll.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/editor/i18n/translation_en_us.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/editor/i18n/translation_signavio_en_us.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/utils.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/editor/apromore-editor.js" type="text/javascript"/>

        <!-- Include all Editor plug-ins -->
        <z:zk forEach="${arg.plugins}">
            <n:script src="${each.getJavaScriptURI()}" type="text/javascript"/>
        </z:zk>

        <n:span id="oryxstartupcode">
            <n:script>
                <![CDATA[
                    var urlData = '${arg.url}';

                    ORYX.Editor.prototype.resetDifference = function() {
                        reloadJSON(editorConfig);
                    }

                    ORYX.CONFIG.PANEL_LEFT_COLLAPSED = true;
                    ORYX.CONFIG.WINDOW_HEIGHT        = 600;

                    // Replace any current model in oryxEditor1 with 
                    function reloadJSON(json) {
                        // Remove the existing model from the canvas
                        oryxEditor1.getCanvas().getChildShapes().each(function (shape) {
                            oryxEditor1.deleteShape(shape);
                        }.bind(this));

                        // Reload the modified model
                        oryxEditor1.importJSON(json, true);
                    };

                    ORYX.Editor.prototype.displayMLDifference = function(buttonIndex, type, start, a, b, newTasks, end, greys) {

                        // Find the shapes corresponding to the function arguments resource IDs
                        function indexJSON(json) {
                            var shapes = {};
                            json.childShapes.each(function (shape) {
                                shapes[shape.resourceId] = shape;
                            }.bind(this));
                            return shapes;
                        };

                        var json = jQuery.extend(true, {}, editorConfig);
                        var shapes = indexJSON(json);

                        function uuid() {
                            return "uuid-" + Math.random().toString();
                        }

                        function addFlowNode(id, stencilId, x, y, w, h) {
                            id = uuid();
                            var addition = {
                                "bounds": {
                                    "lowerRight": { "x": x + w/2, "y": y + h/2 },
                                    "upperLeft": { "x": x - w/2, "y": y - h/2 }
                                },
                                "childShapes": [],
                                "incoming": [],
                                "labels": [],
                                "outgoing": [],
                                "properties": {
                                    "bordercolor": "#FF0000"
                                },
                                "resourceId": id,
                                "stencil": { "id": stencilId }
                            };
                            json.childShapes.push(addition);
                            shapes[id] = addition;
                            return addition;
                        };

                        function addSequenceFlow(id, source, target, waypoints) {
                            id = uuid();

                            function findCenter(shape) {
                                return { x: (shape.bounds.lowerRight.x - shape.bounds.upperLeft.x)/2, y: (shape.bounds.lowerRight.y - shape.bounds.upperLeft.y)/2 }; 
                            };

                            var addition = {
                                "childShapes": [],
                                "dockers": [
                                    findCenter(shapes[source]),
                                    findCenter(shapes[target])
                                ],
                                "incoming": [],
                                "labels": [],
                                "outgoing": [
                                    { "resourceId": target }
                                ],
                                "properties": {
                                    "bordercolor": "#FF0000"
                                },
                                "resourceId": id,
                                "stencil": { "id": "SequenceFlow" },
                                "source": { "resourceId": source },
                                "target": { "resourceId": target }
                            };
                            if (waypoints) {
                                var endpoint = addition.dockers.pop();
                                addition.dockers = addition.dockers.concat(waypoints);
                                addition.dockers.push(endpoint);
                            }
                            json.childShapes.push(addition);
                            shapes[source].outgoing.push({ resourceId: id });
                        };

                        function highlight(shape) {
                            shape.properties["selected"] = true;
                            shape.properties["selectioncolor"] = "#FF0000";
                        };

                        function shapeCenter(shape) {
                            return {x: (shape.bounds.lowerRight.x + shape.bounds.upperLeft.x) / 2,
                                    y: (shape.bounds.lowerRight.y + shape.bounds.upperLeft.y) / 2};
                        }

                        function distance(a, b) { return Math.sqrt((a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y)); };

                        // Find a point at least minSpacing away from points a and b, forming at least a right angle.  Sign +1 or -1 selects the two solutions.
                        function lagrangePoint(a, b, minSpacing, sign) {
                            var dx = (b.y - a.y);
                            var dy = (a.x - b.x);
                            var scale = sign * Math.max(minSpacing / Math.sqrt(dx * dx + dy * dy), 0.5);
                            return {x: (a.x + b.x)/2 + (b.y - a.y)*scale, y: (a.y + b.y)/2 + (a.x - b.x)*scale};
                        };

                        // Create a gateway from the Start element, splitting between elements A and B and rejoining to the End element
                        function createSplitAndJoin(gatewayStencilId) {
                            if (message = validate(["start.length == 1", "a.length == 1", "b.length == 1", "end.length == 1"])) { alert(message); }
                            var cs = shapeCenter(shapes[start[0]]);
                            var ca = shapeCenter(shapes[a[0]]);
                            var cb = shapeCenter(shapes[b[0]]);
                            var ce = shapeCenter(shapes[end[0]]);
                            var gateway1 = lagrangePoint(ca, cb, 90, +1);
                            var gateway2 = lagrangePoint(ca, cb, 90, -1);
                            if (distance(cs,gateway1) + distance(gateway2,ce) > distance(cs,gateway2) + distance(gateway1,ce)) {
                                var tmp = gateway1;
                                gateway1 = gateway2;
                                gateway2 = tmp;
                            }
                            var startplus = addFlowNode("sid-startplus", gatewayStencilId, gateway1.x, gateway1.y, 40, 40).resourceId;
                            var endplus = addFlowNode("sid-endplus", gatewayStencilId, gateway2.x, gateway2.y, 40, 40).resourceId;

                            addSequenceFlow("sid-start-startplus", start[0], startplus);
                            addSequenceFlow("sid-startplus-a", startplus, a[0]);
                            addSequenceFlow("sid-startplus-b", startplus, b[0]);
                            highlight(shapes[a[0]]);
                            highlight(shapes[b[0]]);
                            addSequenceFlow("sid-a-endplus", a[0], endplus);
                            addSequenceFlow("sid-b-endplus", b[0], endplus);
                            addSequenceFlow("sid-endplus-end", endplus, end[0]);
                        }

                        function validate(constraints) {
                            var violations = constraints
                                .map(function(constraint, index, constraints) { return eval(constraint) ? null : constraint; })
                                .filter(function(x) { return x });
                            console.info("Violations: " + violations);
                            console.dir(violations);
                            return violations.length == 0 ? null : "Assertions violated by Compare-Logic for pattern " + type + ": " + violations;
                        }

                        switch (type) {
                        case "CAUSCONC1":  // In the log Task A occurs before Task B, while in the model they are concurrent
                        case "CONFLICT3":
                            if (message = validate(["start.length == 1", "a.length == 1", "b.length == 1", "end.length == 1"])) { alert(message); }
                            addSequenceFlow("sid-start-a", start[0], a[0]);
                            highlight(shapes[a]);
                            addSequenceFlow("sid-a-b", a[0], b[0]);
                            highlight(shapes[b]);
                            addSequenceFlow("sid-b-end", b[0], end[0]);
                            break;

                        case "CAUSCONC2":
                        case "CONFLICT1":
                            createSplitAndJoin("ParallelGateway");
                            break;

                        case "CONFLICT2":
                        case "CONFLICT4":
                            createSplitAndJoin("Exclusive_Databased_Gateway");
                            break;

                        case "TASKABS":
                        case "TASKABS3":
                        case "TASKABSModel":
                        case "UNOBSACYCLICINTER":
                            if (message = validate(["start.length == 1", "end.length == 1"])) { alert(message); }
                            addSequenceFlow("sid-start-end", start[0], end[0]);
                            break;

                        case "TASKABS4":
                        case "TASKABSLog":
                        case "TASKSUB":
                        case "TASKRELOC":
                            if (message = validate(["start.length == 1", "newTasks.length == 1", "end.length == 1"])) { alert(message); }
                            var cs = shapeCenter(shapes[start[0]]);
                            var ce = shapeCenter(shapes[end[0]]);
                            var cm = lagrangePoint(cs, ce, 130, +1);

                            var middle = addFlowNode("sid-a", "Task", cm.x, cm.y, 100, 80);
                            middle.properties.tasktype = "None";
                            middle["properties"]["name"] = newTasks[0];
                            middle["properties"]["bgcolor"] = "white";

                            addSequenceFlow("sid-start-a", start[0], middle.resourceId);
                            addSequenceFlow("sid-a-end", middle.resourceId, end[0]);
                            break;

                        case "TASKSKIP1":
                            if (message = validate(["start.length == 1", "a.length >= 1", "end.length == 1"])) { alert(message); }
                            var cs = shapeCenter(shapes[start[0]]);
                            var cm1 = shapeCenter(shapes[a[0]]);
                            var cm2 = shapeCenter(shapes[a[a.length - 1]]);
                            var ce = shapeCenter(shapes[end[0]]);
                            var g1 = lagrangePoint(cs, cm1, 90, +1);
                            var g2 = lagrangePoint(cm2, ce, 90, +1);

                            var startplus = addFlowNode("sid-startplus", "Exclusive_Databased_Gateway", g1.x, g1.y, 40, 40).resourceId;
                            var endplus = addFlowNode("sid-endplus", "Exclusive_Databased_Gateway", g2.x, g2.y, 40, 40).resourceId;
                            addSequenceFlow("sid-startplus-endplus", startplus, endplus);
                            addSequenceFlow("sid-start-startplus", start[0], startplus);
                            addSequenceFlow("sid-startplus-a", startplus, a[0]);
                            for (i=0; i < a.length; i++) {
                                highlight(shapes[a[i]]);
                            }
                            addSequenceFlow("sid-a-endplus", a[a.length - 1], endplus);
                            addSequenceFlow("sid-endplus-end", endplus, end[0]);
                            break;

                        case "TASKSKIP2":
                        case "UNOBSCYCLICINTER":
                            if (message = validate(["start.length == 1", "a.length >= 1", "end.length == 1"])) { alert(message); }
                            addSequenceFlow("sid-start-a", start[0], a[0]);
                            highlight(shapes[a[0]]);
                            for (i=1; i < a.length; i++) {
                                addSequenceFlow("sid-link-" + 1, a[i-1], a[i]);
                                highlight(shapes[a[i]]);
                            }
                            addSequenceFlow("sid-a-end", a[a.length - 1], end[0]);
                            break;

                        case "UNMREPETITION":
                            if (message = validate(["start.length == 1", "newTasks.length == 1", "end.length == 1"])) { alert(message); }
                            var s = start[0];
                            var e = end[0];
                            var cs = shapeCenter(shapes[s]);
                            var ce = shapeCenter(shapes[e]);
                            var cm = lagrangePoint(cs, ce, 0, +1);
                            var cr = lagrangePoint(cs, ce, 270, +1);
                            var middle = addFlowNode("sid-a", "Exclusive_Databased_Gateway", cm.x, cm.y, 40, 40);
                            var repeating = addFlowNode("sid-b", "Task", cr.x, cr.y, 100, 80);
                            repeating.properties.tasktype = "None";
                            repeating["properties"]["name"] = newTasks[0];
                            repeating["properties"]["bgcolor"] = "white";
                            addSequenceFlow("sid-start-xor", s, middle.resourceId);
                            addSequenceFlow("sid-xor-end", middle.resourceId, e);
                            addSequenceFlow("sid-xor-repeating", middle.resourceId, repeating.resourceId, [{x: (cr.x + cm.x)/2 - (cr.y - cm.y)/2, y: (cr.y + cm.y)/2 + (cr.x - cm.x)/2}]);
                            addSequenceFlow("sid-repeating-xor", repeating.resourceId, middle.resourceId, [{x: (cr.x + cm.x)/2 + (cr.y - cm.y)/2, y: (cr.y + cm.y)/2 - (cr.x - cm.x)/2}]);
                            break;

                        case "TASKSWAP":
                            if (message = validate(["start.length == 1", "a.length == 1", "b.length == 1", "end.length == 1"])) { alert(message); }
                            var cs = shapeCenter(shapes[start[0]]);
                            var ca = shapeCenter(shapes[a[0]]);
                            var cb = shapeCenter(shapes[b[0]]);
                            var ce = shapeCenter(shapes[end[0]]);
                            var sb = lagrangePoint(cs, cb, 0, +1);
                            var ae = lagrangePoint(ca, ce, 0, -1);
                            highlight(shapes[a[0]]);
                            highlight(shapes[b[0]]);
                            addSequenceFlow("sid-start-b", start[0], b[0], [sb]);
                            addSequenceFlow("sid-b-a", b[0], a[0]);
                            addSequenceFlow("sid-a-end", a[0], end[0], [ae]);
                            break;

			default:
                            alert("Unsupported difference type \"" + type + "\"");
                            return;
                        }

                        reloadJSON(json);

                        // Reduce the opacity of greyed-out elements
                        shapes = indexJSON(this._canvas.toJSON());
                        for (var i = greys.length; i--;) {
                            shapes[greys[i]].getShape().node.setAttributeNS(null, "style", "opacity: 0.25");
                        }
                        console.dir(json);

                        ORYX.Editor.prototype.repairMLDifference = function() {

                            // Remove the greyed-out elements
                            for (var i = greys.length; i--;) {
                                function removeElement(shape) {
                                    json.childShapes.each(function (childShape) {
                                        if (childShape && childShape.resourceId == shape.resourceId) {
                                            console.log("Removing edge " + shape.resourceId);
                                            json.childShapes.remove(childShape);
                                        }
                                    }.bind(this));
                                }
                                removeElement(shapes[greys[i]].getShape());
                            }

                            // Remove red highlighting from added elements
                            json.childShapes.each(function (childShape) {
                                if (childShape && childShape.properties.bordercolor == "#FF0000") {
                                    childShape.properties.bordercolor = "#000000";
                                }
                                if (childShape && childShape.stencil.id == "Task" && childShape.properties.bgcolor == "white") {
                                    childShape.properties.bgcolor = "#FFFFCC";
                                }
                                if (childShape && childShape.properties.selected) {
                                    childShape.properties.selected = false;
                                }
                            }.bind(this));

                            reloadJSON(json);

                            // Inverse function to JSON.parse, because JSON.stringify isn't
                            function stringify(obj) {

                                var t = typeof (obj);
	                        if (t != "object" || obj === null) {

		                    // simple data type
		                    if (t == "string") obj = '"'+obj+'"';
		                    return String(obj);

	                        }
	                        else {

		                    // recurse array or object
		                    var n, v, json = [], arr = (obj && obj.constructor == Array);

		                    for (n in obj) {
			                v = obj[n]; t = typeof(v);

			                if (t == "string") v = '"'+v+'"';
			                else if (t == "object" && v !== null) v = stringify(v);

                                        if (t != "function") json.push((arr ? "" : '"' + n + '":') + String(v));
		                    }

		                    return (arr ? "[" : "{") + String(json) + (arr ? "]" : "}");
	                        }
                            };

                            // Convert the repaired model from JSON to BPMN and re-invoke the comparison logic
                            new Ajax.Request('${arg.exportPath}', {
                                parameters: {'data': stringify(json)},
                                method: 'POST',

                                onSuccess: function(transport) {
                                    zAu.send(new zk.Event(zk.Widget.$(jq("$win")), 'onRepair', transport.responseText));
                                    editorConfig = json;
                                }.bind(this),

                                onFailure: function(transport) {
                                    Ext.Msg.show({
                                        title: "Error",
                                        msg: "Failed to recalculate differences!",
                                        buttons: Ext.Msg.OK,
                                        icon: Ext.Msg.ERROR
                                    }).getDialog().syncSize()
                                }.bind(this)
                            });
                        }
                    }

                    ORYX.Editor.prototype.repairMLDifference = function() {
                        alert("You must select a difference to repair.");
                    }

                    var oryxEditor1;

                    // This function is called upon load of all Oryx dependencies
                    window.onOryxResourcesLoaded = function() {
                        var createEditor = function(id, jsonData) {
                            var editor = new ORYX.Editor ({
				model : {
				    id: id,
				    stencilset : {
                                        url : '${arg.url}',
                                        namespace : '${arg.url}'
                                    },
				},
				fullscreen : false
			    });

                            // Import new process model
                            new Ajax.Request('${arg.importPath}', {
                                parameters: {
                                    'data': jsonData,
                                    'differences': '${arg.differences}'
                                },
                                method: 'POST',

                                onSuccess: function(transport) {
                                    /*var*/ editorConfig = Ext.decode(transport.responseText);
                                    editor.importJSON(editorConfig, true);

                                    // Call Auto-Layout if everything is available
                                    window.setTimeout(function() {
                                        var layouter;
                                        if (urlData == 'http://b3mn.org/stencilset/epc#') {
                                            layouter = oryxEditor1.pluginsData.find(function(pluginData) {
                                                return pluginData.name === "Layout-EPC";
                                            });
                                        } else if (urlData == 'http://b3mn.org/stencilset/bpmn1.1#' || urlData == 'http://b3mn.org/stencilset/bpmn2.0#') {
                                            layouter = oryxEditor1.pluginsData.find(function(pluginData) {
                                                return pluginData.name === "Layout-BPMN";
                                            });
                                        }

                                        var doAutoLayout = false; //'${arg.doAutoLayout}' === 'true';
                                        if (layouter && doAutoLayout) {
                                            layouter.functionality();                                            
                                        }

                                        Ext.select('svg').setVisible(true);
                                        window.onbeforeunload = null;
                                    }, 1000);
                                }.bind(this),

                                onFailure: function(transport) {
                                    alert("Failed to load process fragment!");
                                }.bind(this)
                            });

                            return editor;
                        };

			oryxEditor1 = createEditor('oryx-canvas1', '${arg.jsonData}');

                        Ext.select('svg').setVisible(false);

                        ORYX.Plugins.ApromoreSave.apromoreSave = function(json, svg) {
                            new Ajax.Request('${arg.exportPath}', {
                                parameters: {'data': json},
                                method: 'POST',

                                onSuccess: function(transport) {
                                    zAu.send(new zk.Event(zk.Widget.$(jq("$win")), 'onSave', transport.responseText));
                                }.bind(this),

                                onFailure: function(transport) {
                                    Ext.Msg.show({
                                        title: "Error",
                                        msg: "Failed to save the Process!",
                                        buttons: Ext.Msg.OK,
                                        icon: Ext.Msg.ERROR
                                    }).getDialog().syncSize()
                                }.bind(this)
                            });
                        };

                        ORYX.Plugins.ApromoreSave.apromoreSaveAs = function(json, svg) {
                            new Ajax.Request('${arg.exportPath}', {
                                parameters: {'data': json},
                                method: 'POST',

                                onSuccess: function(transport) {
                                    zAu.send(new zk.Event(zk.Widget.$(jq("$win")), 'onSaveAs', transport.responseText));
                                }.bind(this),

                                onFailure: function(transport) {
                                    Ext.Msg.show({
                                        title: "Error",
                                        msg: "Failed to save process as " + transport.responseText,
                                        buttons: Ext.Msg.OK,
                                        icon: Ext.Msg.ERROR
                                    }).getDialog().syncSize()
                                    alert("Failed to save process as " + nativeFormat);
                                }.bind(this)
                            });
                        };
                    };
                ]]>
            </n:script>
        </n:span>
    </n:div>

    <n:table>
        <n:tr>
            <n:td style="vertical-align: top" width="20%">
                <vbox hflex="1">
                    <toolbar id="differences" hflex="1">
                        <label hflex="1">Differences</label>
                        <button id="apply" label="Apply" style="float: right"/>
                    </toolbar>
                    <label>Baz</label>
                </vbox>
            </n:td>
            <n:td valign="top"><n:div id="oryx-canvas1"></n:div></n:td>
        </n:tr>
    </n:table>
</window>

